tags$li(style = "margin-bottom: 10px;",
strong("Understreg medlemsfordele:"),
"Forklar kort hvordan rådgivning, netværk og tilbud kan hjælpe dem her og nu.")
)
),
# Ekstra: Lignende events
div(class = "info-box2",
h2("Lignende virksomheder deltog i",
style = "color: #ffffff; font-size: 20px; margin-bottom: 15px;"),
tags$ul(style = "text-align: left; padding-left: 20px; font-size: 15px;",
tags$li(style = "margin-bottom: 10px;", "Webinar: Grøn omstilling"),
tags$li(style = "margin-bottom: 10px;", "Netværksmøde: SMV Digital"),
tags$li(style = "margin-bottom: 10px;", "1-1 sparring: Strategi og vækst")
)
)
)
),
# -----------------------------------------
# KOLONNE 3: Analyse og kortvisning
# -----------------------------------------
column(4,
# Advarsel om manglende eventdeltagelse
if (d$deltaget_i_event == "Nej") {
div(style = "background-color: #fff5cc; color: #ffffff; padding: 15px 20px;
border-left: 10px solid #f0ad4e; border-radius: 10px;
margin-bottom: 15px; font-size: 16px;",
HTML("<strong><i class='fa fa-exclamation-triangle'></i> Anbefaling</strong><br>
<span style='color:#444;'>Tag kontakt snarest – virksomheden har ikke deltaget i et event de sidste 12 måneder.</span>")
)
},
div(class = "company-detail-card",
div(class = "info-box3", "Churn Analyse"),
div(class = "info-box2", style = "background-color: #B43C37;",
p("Tabspotentiale i måneden:"),
h2(paste0("Kr. ", format(tabspotentiale, big.mark = ".", decimal.mark = ",")))),
plotOutput("gauge_company_detail", height = "220px"),
div(style = "text-align:center; margin-top: -10px;",
h4(paste0(round(churn_prob * 100, 1), "% – ", risk),
style = paste0("color:", risk_color, "; font-weight:bold; font-size: 18px;")),
div(
class = "info-box2",
style = "background-color: #ffffff; color: #0e2f33; padding: 15px 20px;",
h3(paste("Virksomheden er", ifelse(d$Employees > 50, "mellemstor", "lille"),
"og har", ifelse(d$har_haft_kontakt == "Nej", "ikke", "haft"),
"været i kontakt det seneste år. Der er", tolower(risk), "for frafald, men stort potentiale."))
)
),
leafletOutput("company_map", height = "220px")
)
)
)
)
} else {
# Hvis intet er valgt eller fundet
h4("Vælg en virksomhed i tabellen i 'Indsigt'-fanen for at se detaljer.")
}
})
output$event_details <- renderUI({
req(input$event_selector)
evt <- event_list %>% filter(id == input$event_selector)
tagList(
h4(evt$navn),
p(strong("Dato:"), format(evt$dato, "%d.%m.%Y")),
p(strong("Tidspunkt:"), evt$tidspunkt),
p(strong("Sted:"), evt$sted),
p(strong("Ledige pladser:"), evt$pladser),
p(strong("Beskrivelse:"), evt$beskrivelse)
)
})
# -----------------------------------------------
# Popup-beskeder ved klik på knapper i detaljer
# -----------------------------------------------
observeEvent(input$send_event_invite, {
d <- selected_company()
req(d)
evt <- event_list %>% filter(id == input$event_selector)
shinyalert(
title = "Invitation sendt",
text = paste0("Virksomheden (", d$CompanyTypeName,
") er inviteret til:\n\n", evt$navn, "\n",
format(evt$dato, "%d.%m.%Y"), " kl. ", evt$tidspunkt, "\n",
"Sted: ", evt$sted),
type = "success"
)
})
observeEvent(input$book_meeting, {
shinyalert(
title = "Møde-booking",
text = "Vi giver konsulenten besked om at kontakte virksomheden.",
type = "info"
)
})
observeEvent(input$call_now, {
shinyalert(
title = "Opkald på vej",
text = "Vi giver konsulenten besked om at kontakte virksomheden.",
type = "info"
)
})
observeEvent(input$send_mail, {
d <- selected_company()
req(d)
email_adresse <- "kontakt@firma.dk"  # ← Udskift med rigtig email, fx `d$email`
subject <- URLencode("Invitation til event")
body <- URLencode(paste0("Hej ", d$CompanyTypeName, ",\n\nVi inviterer jer til næste event..."))
mailto_link <- paste0("mailto:", email_adresse, "?subject=", subject, "&body=", body)
session$sendCustomMessage(type = 'open_url', message = mailto_link)
})
# ---------------------------------------------
# Plot: Simuleret churn-trend for valgt virksomhed
# Viser udvikling over de sidste 12 måneder
# ---------------------------------------------
output$churn_trend_plot <- renderPlot({
selected_row <- input$dashboard_table_rows_selected
if (length(selected_row)) {
d <- filtered_data()[selected_row, ]
set.seed(1)
churn_history <- runif(12, min = d$churn_prob * 0.8, max = d$churn_prob * 1.1)
months <- format(seq(Sys.Date() - months(11), by = "month", length.out = 12), "%b")
churn_df <- data.frame(Month = factor(months, levels = months), Churn = churn_history)
ggplot(churn_df, aes(x = Month, y = Churn)) +
geom_line(color = "black", size = 1.2) +
ylim(0, 1) +
theme_minimal() +
labs(title = NULL, y = NULL, x = NULL) +
theme(
axis.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = margin(5, 5, 5, 5)
)
}
})
# ---------------------------------------------
# Reactive: Samler inputs til en ny simuleret virksomhed
# Bruges ved klik på "Kør Simulation"
# ---------------------------------------------
new_company <- reactive({
tibble(
Employees = input$sim_employees,
PostalCode = factor(input$sim_postal, levels = levels(data_map$PostalCode)),
CompanyTypeName = factor(input$sim_company_type, levels = levels(data_map$CompanyTypeName)),
har_haft_kontakt = factor(input$sim_contact, levels = c("Ja", "Nej")),
deltaget_i_event = factor(input$sim_event, levels = c("Ja", "Nej")),
hjælp_kategori = factor(input$sim_help_category, levels = levels(data_map$hjælp_kategori)),
medlem_antal_år = input$sim_member_years,
Branche_navn = factor(input$sim_branche, levels = levels(data_map$Branche_navn)),
MeetingLength = input$sim_meeting_length,
PNumber = 99999999
)
})
# ---------------------------------------------
# UI-output: Resultat af simulationen
# Viser churn-sandsynlighed og risikokategori
# ---------------------------------------------
output$simulation_result <- renderUI({
if (input$run_simulation > 0) {
isolate({
prediction <- predict(final_model, new_data = new_company(), type = "prob")
churn_prob <- prediction$.pred_1
risk_category <- ifelse(churn_prob > 0.75, "High",
ifelse(churn_prob > 0.5, "Medium", "Low"))
color <- case_when(
risk_category == "High"   ~ "#d9534f",
risk_category == "Medium" ~ "#f0ad4e",
TRUE                      ~ "#5cb85c"
)
icon_name <- case_when(
risk_category == "High"   ~ "exclamation-triangle",
risk_category == "Medium" ~ "exclamation-circle",
TRUE                      ~ "check-circle"
)
div(
class = "risk-result-box",
style = "margin-top: 20px; text-align: center;, color: #0e2f33;",
h3(paste0("Churn-sandsynlighed: ", round(churn_prob * 100, 1), "%"),
style = paste0("color: ", color, "; font-weight: bold;")),
h4(paste("Risikokategori:", risk_category),
icon(icon_name, class = "fa-2x", style = paste0("color: ", color)))
)
})
} else {
div(
style = "text-align: center; padding-top: 50px; color: #2a6c73;",
icon("sliders-h", style = "font-size: 50px; margin-bottom: 20px;"),
h4("Indtast parametre og klik på 'Kør Simulation'")
)
}
})
observeEvent(input$sim_contact, {
if (input$sim_contact == "Nej") {
updateNumericInput(session, "sim_meeting_length", value = 0)
session$sendCustomMessage("disableMeeting", TRUE)
} else {
session$sendCustomMessage("disableMeeting", FALSE)
}
})
# ---------------------------------------------
# Plot: Boxplot over churn pr. branche
# ---------------------------------------------
output$plot_branch_churn <- renderPlot({
df <- filtered_data()
ggplot(df, aes(x = Branche_navn, y = churn_prob)) +
geom_boxplot(fill = "#7FC8A3") +
coord_flip() +
labs(title = "Branche vs. Churn", x = "", y = "Churn") +
theme_minimal()
})
# ---------------------------------------------
# Plot: Gennemsnitlig churn ved eventdeltagelse
# ---------------------------------------------
output$plot_event_churn <- renderPlot({
df <- filtered_data()
df$deltaget_i_event <- factor(df$deltaget_i_event)
df %>%
group_by(deltaget_i_event) %>%
summarise(avg = mean(churn_prob)) %>%
ggplot(aes(x = deltaget_i_event, y = avg, fill = deltaget_i_event)) +
geom_col() +
labs(title = "Eventdeltagelse vs. Churn", x = "", y = "Churn") +
theme_minimal() +
guides(fill = FALSE)
})
# ---------------------------------------------
# Plot: Scatter + smooth for churn ift. antal ansatte
# ---------------------------------------------
output$plot_employee_churn <- renderPlot({
df <- filtered_data()
ggplot(df, aes(x = Employees, y = churn_prob)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess") +
labs(title = "Ansatte vs. Churn", x = "Antal ansatte", y = "Churn") +
theme_minimal()
})
# ---------------------------------------------
# Plot: Gauge til visning af churn-risiko efter simulation
# ---------------------------------------------
output$simulation_gauge <- renderPlot({
if (input$run_simulation > 0) {
isolate({
new_company_data <- new_company()
prediction <- predict(final_model, new_data = new_company(), type = "prob")
churn_prob <- prediction$.pred_1
ggplot() +
geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = 0.5, r = 1,
start = 0, end = 2*pi, fill = "lightgrey")) +
geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = 0.5, r = 1,
start = 0, end = 2*pi * churn_prob,
fill = ifelse(churn_prob > 0.75, "#d9534f",
ifelse(churn_prob > 0.5, "#f0ad4e", "#5cb85c")))) +
geom_text(aes(x = 0, y = 0,
label = paste0(round(churn_prob * 100, 1), "%")),
size = 8, fontface = "bold") +
coord_fixed() +
theme_void() +
theme(legend.position = "none") +
scale_fill_identity()
})
}
})
# ---------------------------------------------
# Plot: Simuleret churn-trend over 12 måneder (søjlediagram)
# ---------------------------------------------
output$churn_trend_plot <- renderPlot({
selected_row <- input$dashboard_table_rows_selected
if (length(selected_row)) {
d <- filtered_data()[selected_row, ]
churn_prob <- d$churn_prob
set.seed(1)
churn_history <- runif(12, min = churn_prob * 0.8, max = churn_prob * 1.1)
months <- format(seq(Sys.Date() - months(11), by = "month", length.out = 12), "%b")
churn_df <- data.frame(Month = factor(months, levels = months), Churn = churn_history)
ggplot(churn_df, aes(x = Month, y = Churn * 100, fill = Churn)) +
geom_col(width = 0.6) +
scale_y_continuous(labels = function(x) paste0(round(x), "%")) +
scale_fill_gradient(low = "#5cb85c", high = "#d9534f") +
labs(title = "Simuleret churn over 12 måneder", x = NULL, y = "Churn (%)") +
theme_minimal(base_size = 13) +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.margin = margin(5, 15, 5, 5)
)
}
})
# ---------------------------------------------
# Leaflet: Kortvisning med markør for valgt virksomhed
# ---------------------------------------------
output$company_map <- renderLeaflet({
selected_row <- input$dashboard_table_rows_selected
if (length(selected_row)) {
d <- filtered_data()[selected_row, ]
leaflet() %>%
addTiles() %>%
setView(lng = d$lng, lat = d$lat, zoom = 12) %>%
addMarkers(
lng = d$lng,
lat = d$lat,
popup = paste("<strong>", d$CompanyTypeName, "</strong><br>", d$Branche_navn)
)
}
})
# ---------------------------------------------
# Plotly: Gauge til visning af churn-risiko (virksomhedsdetalje)
# ---------------------------------------------
output$gauge_company_detail <- renderPlot({
selected_row <- input$dashboard_table_rows_selected
if (length(selected_row)) {
selected_pnum <- filtered_data()[selected_row, ]$PNumber
d <- data_map %>% filter(PNumber == selected_pnum)
churn_prob <- round(d$churn_prob, 3)  # keep it as decimal
risk_color <- ifelse(churn_prob > 0.75, "#d9534f",
ifelse(churn_prob > 0.5, "#f0ad4e", "#5cb85c"))
ggplot(data.frame(x = 1, y = churn_prob), aes(x = "", y = y)) +
geom_bar(stat = "identity", width = 1, fill = risk_color) +
geom_bar(aes(y = 1 - y), stat = "identity", width = 1, fill = "lightgrey", position = position_stack(reverse = TRUE)) +
coord_polar("y") +
theme_void() +
geom_text(aes(label = paste0(round(churn_prob * 100, 1), "%")), x = 1.3, y = 0.5, size = 8, fontface = "bold", color = "#0e2f33")
}
})
# ---------------------------------------------
# Reactive: Angiver om der er valgt en virksomhed i tabellen
# Bruges til conditionalPanel i UI (f.eks. vis søgefelt)
# ---------------------------------------------
output$noCompanySelected <- reactive({
is.null(input$dashboard_table_rows_selected) || length(input$dashboard_table_rows_selected) == 0
})
outputOptions(output, "noCompanySelected", suspendWhenHidden = FALSE)
}
#-------------------------------------------------------------------------------
# 4. Kørsel af Shiny-app
#-------------------------------------------------------------------------------
auth0::shinyAppAuth0(ui, server)
# ---------------------------------------------
# Filtrerer data baseret på inputfiltre fra UI
# ---------------------------------------------
filtered_data <- reactive({
data <- data_map %>%
filter(churn_prob * 100 >= input$churn_range[1], churn_prob * 100 <= input$churn_range[2]) %>%
filter(risk_category %in% input$risk_categories) %>%
filter(churn == 0)
# Filtrér på postnumre hvis ikke "Vælg alle"
if (!is.null(input$postal_code) && !("ALL" %in% input$postal_code)) {
data <- data %>% filter(PostalCode %in% input$postal_code)
}
# Filtrér på virksomhedstype
if (!is.null(input$CompanyTypeName) && !("ALL" %in% input$CompanyTypeName)) {
data <- data %>% filter(CompanyTypeName %in% input$CompanyTypeName)
}
# Filtrér på branche
if (!is.null(input$Branche_navn) && !("ALL" %in% input$Branche_navn)) {
data <- data %>% filter(Branche_navn %in% input$Branche_navn)
}
# Debug-print i konsollen
print(paste("Antal rækker i filtered_data:", nrow(data)))
data
})
glimpse(data_map)
runApp()
runApp()
#-------------------------------------------------------------------------------
# 1.5 Join datasæt og tildel risikokategorier
#-------------------------------------------------------------------------------
data_map <- full_results %>%
left_join(postal_coords, by = "PostalCode") %>%
mutate(
risk_category = case_when(
churn_prob > 0.75 ~ "High",
churn_prob > 0.5 ~ "Medium",
TRUE ~ "Low"
),
risk_category = factor(risk_category, levels = c("High", "Medium", "Low")),
# Convert other columns to factors
CompanyTypeName = factor(CompanyTypeName),
Branche_navn = factor(Branche_navn),
hjælp_kategori = factor(hjælp_kategori),
PostalCode = factor(PostalCode)
)
names(data_map)
runApp()
#-------------------------------------------------------------------------------
# 1.2 Indlæsning af datasæt og churn-model
#-------------------------------------------------------------------------------
full_results <- readRDS("data/full_results.rds")           # RDS-fil med medlems- og churndata
event_list <- read.csv("data/events.csv", stringsAsFactors = FALSE)
final_model <- readRDS("models/final_churn_model.rds")     # RDS-fil med trænet model
#-------------------------------------------------------------------------------
# 1.3 Tilføj geografiske koordinater til postnumre
#-------------------------------------------------------------------------------
postal_coords <- data.frame(
PostalCode = c(8800, 8850, 8830, 7470, 8840, 7800, 8831, 8832, 9632, 7850, 9620, 9500, 8860),
lat = c(56.451, 56.532, 56.447, 56.489, 56.472, 56.475, 56.448, 56.449, 56.907, 56.573, 56.824, 57.226, 56.611),
lng = c(9.404, 8.486, 9.186, 9.000, 8.662, 9.156, 9.163, 9.171, 9.287, 9.156, 9.388, 9.388, 8.954)
)
#-------------------------------------------------------------------------------
# 1.4 Sørg for at postnumre er i karakterformat (nødvendigt for korrekt join)
#-------------------------------------------------------------------------------
full_results$PostalCode <- as.character(full_results$PostalCode)
postal_coords$PostalCode <- as.character(postal_coords$PostalCode)
event_list$dato <- as.Date(event_list$dato)
#-------------------------------------------------------------------------------
# 1.5 Join datasæt og tildel risikokategorier
#-------------------------------------------------------------------------------
data_map <- full_results %>%
left_join(postal_coords, by = "PostalCode") %>%
mutate(
risk_category = case_when(
churn_prob > 0.75 ~ "High",
churn_prob > 0.5 ~ "Medium",
TRUE ~ "Low"
),
risk_category = factor(risk_category, levels = c("High", "Medium", "Low")),
# Convert other columns to factors
CompanyTypeName = factor(CompanyTypeName),
Branche_navn = factor(Branche_navn),
hjælp_kategori = factor(hjælp_kategori),
PostalCode = factor(PostalCode)
)
runApp()
runApp()
runApp()
#-------------------------------------------------------------------------------
# 1.1 Indlæsning af pakker
#-------------------------------------------------------------------------------
library(shiny)           # Brugergrænseflade (UI) og serverlogik
library(leaflet)         # Kortvisualisering
library(dplyr)           # Data-manipulation (filter, mutate, group_by, etc.)
library(readr)           # Hurtig og enkel import af data
library(shinyWidgets)    # Ekstra UI-komponenter (fx pickerInput, radioGroupButtons)
library(DT)              # Dynamiske datatabeller
library(ggplot2)         # Visualisering med grafer
library(tibble)          # Bruges til bl.a. simulation (kolonneorienterede datastrukturer)
library(tidymodels)      # Modellering og machine learning framework
#-------------------------------------------------------------------------------
# 1.2 Indlæsning af datasæt og churn-model
#-------------------------------------------------------------------------------
full_results <- readRDS("data/full_results.rds")           # RDS-fil med medlems- og churndata
final_model <- readRDS("models/final_churn_model.rds")     # RDS-fil med trænet model
#-------------------------------------------------------------------------------
# 1.3 Tilføj geografiske koordinater til postnumre
#-------------------------------------------------------------------------------
postal_coords <- data.frame(
PostalCode = c(8800, 8850, 8830, 7470, 8840, 7800, 8831, 8832, 9632, 7850, 9620, 9500, 8860),
lat = c(56.451, 56.532, 56.447, 56.489, 56.472, 56.475, 56.448, 56.449, 56.907, 56.573, 56.824, 57.226, 56.611),
lng = c(9.404, 8.486, 9.186, 9.000, 8.662, 9.156, 9.163, 9.171, 9.287, 9.156, 9.388, 9.388, 8.954)
)
#-------------------------------------------------------------------------------
# 1.4 Sørg for at postnumre er i karakterformat (nødvendigt for korrekt join)
#-------------------------------------------------------------------------------
full_results$PostalCode <- as.character(full_results$PostalCode)
postal_coords$PostalCode <- as.character(postal_coords$PostalCode)
#-------------------------------------------------------------------------------
# 1.5 Join datasæt og tildel risikokategorier
#-------------------------------------------------------------------------------
data_map <- full_results %>%
left_join(postal_coords, by = "PostalCode") %>%
mutate(
risk_category = case_when(
churn_prob > 0.75 ~ "High",
churn_prob > 0.5 ~ "Medium",
TRUE ~ "Low"
),
risk_category = factor(risk_category, levels = c("High", "Medium", "Low"))
)
names(data_map)
runApp()
#-------------------------------------------------------------------------------
# 1.2 Indlæsning af datasæt og churn-model
#-------------------------------------------------------------------------------
full_results <- readRDS("data/full_results.rds")           # RDS-fil med medlems- og churndata
final_model <- readRDS("models/final_churn_model.rds")     # RDS-fil med trænet model
#-------------------------------------------------------------------------------
# 1.3 Tilføj geografiske koordinater til postnumre
#-------------------------------------------------------------------------------
postal_coords <- data.frame(
PostalCode = c(8800, 8850, 8830, 7470, 8840, 7800, 8831, 8832, 9632, 7850, 9620, 9500, 8860),
lat = c(56.451, 56.532, 56.447, 56.489, 56.472, 56.475, 56.448, 56.449, 56.907, 56.573, 56.824, 57.226, 56.611),
lng = c(9.404, 8.486, 9.186, 9.000, 8.662, 9.156, 9.163, 9.171, 9.287, 9.156, 9.388, 9.388, 8.954)
)
#-------------------------------------------------------------------------------
# 1.4 Sørg for at postnumre er i karakterformat (nødvendigt for korrekt join)
#-------------------------------------------------------------------------------
full_results$PostalCode <- as.character(full_results$PostalCode)
postal_coords$PostalCode <- as.character(postal_coords$PostalCode)
#-------------------------------------------------------------------------------
# 1.5 Join datasæt og tildel risikokategorier
#-------------------------------------------------------------------------------
data_map <- full_results %>%
left_join(postal_coords, by = "PostalCode") %>%
mutate(
risk_category = case_when(
churn_prob > 0.75 ~ "High",
churn_prob > 0.5 ~ "Medium",
TRUE ~ "Low"
),
risk_category = factor(risk_category, levels = c("High", "Medium", "Low"))
)
names(data_map)
runApp()
view(data_map)
runApp()
#-------------------------------------------------------------------------------
# 1.1 Indlæsning af pakker
#-------------------------------------------------------------------------------
library(shiny)           # Brugergrænseflade (UI) og serverlogik
library(leaflet)         # Kortvisualisering
library(dplyr)           # Data-manipulation (filter, mutate, group_by, etc.)
library(readr)           # Hurtig og enkel import af data
library(readr)           # Hurtig og enkel import af data
library(dplyr)           # Data-manipulation (filter, mutate, group_by, etc.)
runApp()
