setwd("C:\Users\padur\OneDrive\Desktop\dataanalyse 2024-2025")
#set the folder
setwd("C:\Users\padur\OneDrive\Desktop\dataanalyse 2024-2025")
#set the folder
setwd("C:\Users\padur\OneDrive\Desktop\dataanalyse 2024-2025")
install.packages("tidyverse")
install.packages(pacman)
install.packages("pacman")
library(pacman)
detach("package:pacman", unload = TRUE)
install.packages("pacman")
pacman::p_load("tidyverse","tidymodels","caret","fable")
pacman::p_load(tidyverse,tidymodels,caret,fable)
#det er min første script i r
1+2
10-8
4*5
9/3
27%%6
1-2-3^4+5-(-6/7*(8-sqrt(9)))
x<-100
x
y1<-1:100
y1
typeof(y1)
y2<-seq(1,100)
y2
typeof(y2)
y3<-seq(5,117,7.3)
y3
typeof(y3)
#You can use the c() function to combine numbers into a vector:
z1<-c(1,2,3,4,5,6,7,8,9,10)
z1
z2<-c(11,12)
z3<-c(z1,z2)
z3
t1<-z1+2.5
t1
sqrt(2)^2-2=0
sqrt(2)^2-2==0
near(sqrt(2)^2-2==0)
near(sqrt(2)^2-2,2)
dplyr::near(sqrt(2)^2-2,2)
dplyr::near(sqrt(2)^2, 2)
dplyr::near((0.1 + 0.1 + 0.1) - 0.3, 0)
#Character vectors
name001<-"Aretha Franklin"
#Character vectors
name001<-"Aretha Franklin"
name002<-"Aretha Franklin"
name001
name002
names001<-("Aretha Franklin","Amy Winehouse", "Ella Fitzgerald","Billie Holiday")
names001<-("Aretha Franklin" "Amy Winehouse" "Ella Fitzgerald" "Billie Holiday")
names001<-("Aretha Franklin","Amy Winehouse","Ella Fitzgerald","Billie Holiday")
names001<-("Aretha Franklin" "Amy Winehouse" "Ella Fitzgerald" "Billie Holiday")
names001<-c("Aretha Franklin", "Amy Winehouse", "Ella Fitzgerald", "Billie Holiday")
names001
typeof(names001)
#logical vectors can take three values true false or na
#they are often created when we compare vectors “<” (less than), “<=” (less than equal), “==” (equal), “=>” (greater than equal), “>”
#(greater than), and “!=” (not equal).
l_01<-c("Areta","Franklin")
#logical vectors can take three values true false or na
#they are often created when we compare vectors “<” (less than), “<=” (less than equal), “==” (equal), “=>” (greater than equal), “>”
#(greater than), and “!=” (not equal).
l_01<-c("Aretha","Franklin")
l_01<-"Aretha Franklin"
l_02<-"Aretha Franklin"
l_01==l_02
l_03<-c(1,2,3,4,5)
l_04<-c(5,4,3,2,1)
l_03>=l_04
l_05 <- c(1.1, 6)
l_05 > l_04
l_05 <- c(1.1, 6)
l_05 > l_04
l_06 <- l_03 >= l_04
l_06
typeof(l_06)
sum(l_01)
sum(l_03)
#find mean
mean(l_03)
library(tidyverse)
x[c(3, 2, 5)]
x<-c("one","two","three","four","five")
x[c(3, 2, 5)]
x[c(1,1,5,5,5,2)]
x[c(-3, -2, -5)]
x<-c(10,3,NA,5,8,1,NA)
x[!is.na(x)]
x[x %% 2 == 0]
x <- c(abc = 1, def = 2, xyz = 5)
x[c("xyz", "def")]
df<-tibble(x=1:3,y=c("a","e","f"),
z=runif(3))
# Select first row and second column
df(1,2)
df<-tibble(x=1:3,y=c("a","e","f"),
z=runif(3))
# Select first row and second column
df[1,2]
View(df)
View(df)
# Select all rows and columns x and y
df[, c("x" , "y")]
# Select rows where `x` is greater than 1 and all columns
df[df$x > 1, ]
df1[, "x"]
df1 <- data.frame(x = 1:3)
df1[, "x"]
df2 <- tibble(x = 1:3)
df2[, "x"]
df1[, "x" , drop = FALSE]
n <- c(Esbjerg = 1, Aarhus = 2, Odense = 3, Aalborg = 4, Copenhagen = 5, Randers = 6)
n
typeof(n)
names(n)
names(n) <- c("Copenhagen", "Aarhus", "Odense", "Aalborg", "Esbjerg", "Randers")
n
names(n) <- NULL
n
not_num<-c("1","2","300","4000","50000")
typeof(not_num)
now_num<-as.numeric(not_num)
now_num
del_mis<-c(1,2,3,NA)
del_mis
del_mis(!is.na(del_mis))
del_mis[!is.na(del_mis)]
#! means not, is.na means is not available, and the two of them together mean only non-missing values (not
#not available = available).
##Matrix and array
matr01<-matrix(c(1:12),nrow=4, byrow = FALSE)
View(matr01)
View(matr01)
##The byrow argument is a logical argument. If it is equal to FALSE, the matrix is filled by columns, otherwise
##the matrix is filled by rows. The default is FALSE.
matr03<-matrix(c(1:12),nrow=4, byrow=TRUE,dimnames = list(c("row1","row2","row3","row4"), c("col1","col2","col3")))
matr03
matr04
##Acelasi lucru dar prin alt cod
matr04 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow = 4, byrow = TRUE)
rownames(matr04) <- c("row1", "row2", "row3", "row4")
colnames(matr04) <- c("col1", "col2", "col3")
matr04
##exemplu cu subsetting
matr05 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow = 4, byrow = TRUE)
rownames(matr05) <- c("row1", "row2", "row3", "row4")
colnames(matr05) <- c("col1", "col2", "col3")
matr05[3, 1]
matr05
matr05[4, 3]
matr05[3, ]
matr05[, 1]
matr05>= 10
##dataframe
musicians <- data.frame(Name = c("Elvis Aaron Presley", "Ray Charles Robinson",
"Aretha Louise Franklin"),
DOB = c("1935-01-08", "1930-09-23", "1942-03-25"),
Birthplace = c("Tupelo, Mississippi, USA", "Albany, Georgia, USA",
"Detroit, Michigan, USA"),
Died = c("1977-08-16", "2004-06-10", "2018-08-16"),
Occupation = c("Singer, actor",
"Musician, singer, songwriter, composer",
"Singer, songwriter, pianist"),
Children = c("1", "12", "4"),
stringsAsFactors = FALSE
)
musicians
class(musicians)
str(musicians)
shiny::runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
library(rsconnect)
rsconnect::deployApp(appName = "sleep-health-dashboard", forceUpdate = TRUE)
Sys.setenv(RS_QUARTO_FORCE = "false")  # Dezactivează Quarto
rsconnect::deployApp(appName = "sleep-health-dashboard", forceUpdate = TRUE)
shiny::runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
Sys.setenv(RS_QUARTO_FORCE = "false")  # Dezactivează Quarto
rsconnect::deployApp(appName = "sleep-health-dashboard", forceUpdate = TRUE)
library(rsconnect)
rsconnect::deployApp(appName = "sleep-health-dashboard", forceUpdate = TRUE)
Sys.setenv(RS_QUARTO_FORCE = "false")
rsconnect::setAccountInfo(name='maria-cristiana-maxim',
token='FB38B601AA1081210880D81B78677FE6',
secret='E16fNkTlxRlmB3YNtUNIC6LhQs9TvcHqBjd3ZBqy')
runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
runApp('C:/Users/padur/OneDrive/Desktop/Semestru 2/Data visualisering/Case/Datavisualisering-/Case/app')
rsconnect::showLogs(streaming = TRUE)
# Bruger dplyr til at merge dataframes
library(dplyr)
#indlæser data
meetings <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/meetings.rds")
events <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/events.rds")
event_participants <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/event_participants.rds")
company_contacts <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/company_contacts.rds")
all_contact <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/all_contact.rds")
all_companies <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/all_companies.rds")
#merger dataframes
merged_df <- all_companies %>%
left_join(company_contacts, by = "CompanyId") %>%
select(-ends_with(".y")) %>%
select(-ends_with(".x"))
merged_df <- merged_df %>%
left_join(all_contact, by = "contactId") %>%
select(-ends_with(".y")) %>%
select(-ends_with(".x"))
meetings_unique <- meetings %>% # bruger det fordi vi har duplicates værdier
group_by(CompanyId) %>%
summarise(across(everything(), first))  # first row of each group
merged_df <- merged_df %>%
left_join(meetings_unique, by = "CompanyId")%>%
select(-ends_with(".y")) %>%
select(-ends_with(".x"))
merged_df <- rename(merged_df, c("Cvr" = "z_companies_1_CVR-nummer_1"))
events_unique <- events %>% # bruger det fordi vi har duplicates værdier
group_by(Cvr) %>%
summarise(across(everything(), first))  # first row of each group
merged_df <- merged_df %>%
left_join(events_unique, by = "Cvr") %>%
select(-ends_with(".y")) %>%
select(-ends_with(".x"))
View(event_participants)
event_participants_unique <- event_participants %>% # bruger det fordi vi har duplicates værdier
group_by(Cvr) %>%
summarise(across(everything(), first))  # first row of each group
merged_df <- merged_df %>%
left_join(event_participants_unique, by = "Cvr") %>%
select(-ends_with(".y")) %>%
select(-ends_with(".x"))
glimpse(merged_df)
saveRDS(merged_df, "merged_df.rds") # gemmer filen som rds fil
merged_df %>% drop_na() # fjerner NA værdier
library(tidyr)
merged_df %>% drop_na() # fjerner NA værdier
count_(merged_df, vars = c("NA"))
merged_df %>% drop_na() # fjerner NA værdier
merged_df <- merged_df %>% drop_na() # fjerner NA værdier
glimpse(merged_df)
View(merged_df)
old_projects <- readRDS("C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/old_projects.rds")
View(old_projects)
shiny::runApp('C:/Users/padur/OneDrive/Desktop/shiny app')
runApp('C:/Users/padur/OneDrive/Desktop/shiny app')
shiny::runApp('C:/Users/padur/OneDrive/Desktop/shiny app')
shiny::runApp('C:/Users/padur/OneDrive/Desktop/shiny app')
runApp('C:/Users/padur/OneDrive/Desktop/shiny app')
shiny::runApp('C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/2_semester_opgave')
runApp('C:/Users/padur/OneDrive/Desktop/Medlemsdata-20250401/2_semester_opgave')
readRenviron("Renviron.sh")
options(shiny.port = 8080)
Sys.getenv("AUTH0_USER")
