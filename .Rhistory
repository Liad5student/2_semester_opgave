theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 9)
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.10))) #ektra space til labels
ggsave("images/4_top_10_variabler_pr_model.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# Chunk 13
# -------------------------------------------------------
# 10. Endelig model – Finetuning af Random Forest
# -------------------------------------------------------
# undersøg kun på hele datasæt
# 1. Lav et workflow set med kun én model: Random Forest
churn_workflow_set_rf <- workflow_set(
preproc = list(churn_recipe = churn_recipe),
models  = list(rf = rf_spec)  # kun én model
)
# 2. Tænd for parallelisering
plan(multisession)
# 3. Start tidstagning
strt.time <- Sys.time()
# Chunk 14
# 4. Tuning af kun Random Forest med 25 kombinationer
churn_results_rf <- churn_workflow_set_rf |>  # <-- her var der fejl i dit input
workflow_map(
resamples = churn_folds,
grid = 25,
metrics = churn_metrics,
control = grid_ctrl,
seed = 2025
)
# Chunk 15
# 5. Tid brugt
Sys.time() - strt.time
# 6. Sluk for parallelisering
plan(sequential)
# 7. Vis bedste resultater pr. metrik
churn_results_rf |>
rank_results(select_best = TRUE) |>
select(wflow_id, .metric, mean) |>
pivot_wider(names_from = .metric, values_from = mean) |>
arrange(-f_meas)
# 8. Visualisér den bedste model
autoplot(churn_results_rf, select_best = TRUE)
# Chunk 16
# ------------------------------------------------------------------------------
# 11. Evaluering af bedste model på testdatasættet (Random Forest)
# ------------------------------------------------------------------------------
# Bemærk: Modellen i dette afsnit er baseret på finetuning med 25 kombinationer
# 1. Find bedste parametre for den bedste model
best_results <- churn_results_rf |>
extract_workflow_set_result("churn_recipe_rf") |>
select_best(metric = "f_meas")
# 2. Finaliser workflow med de fundne parametre
final_wf <- churn_results_rf |>
extract_workflow("churn_recipe_rf") |>
finalize_workflow(best_results)
# 3. Træn modellen på træningsdata og evaluer på testdata
churn_last_fit <- final_wf |>
last_fit(split = churn_split, metrics = churn_metrics)
# 4. Udskriv evalueringsmetrikker
collect_metrics(churn_last_fit)
# 5. Gem confusion matrix som objekt (brugbar til præsentation)
conf_matrix <- churn_last_fit |>
collect_predictions() |>
conf_mat(estimate = .pred_class, truth = churn)
# 6. Gem test-prædiktioner hvis ønsket
test_preds <- collect_predictions(churn_last_fit)
# 7. Træn endelig model på hele datasættet
final_model <- fit(final_wf, data = feature_engineering)
# 8. Gem modellen
saveRDS(final_model, "final_churn_model.rds")
# ------------------------------------------------------------------------------
# 11.1 Eksempel: Forudsig churn for én ny virksomhed
# ------------------------------------------------------------------------------
new_company <- tibble(
Employees = 15,
PostalCode = factor("8800"),
CompanyTypeName = factor("Aktieselskab"),
har_haft_kontakt = factor("Ja"),
deltaget_i_event = factor("Nej"),
hjælp_kategori = factor("Strategi Udvikling"),
medlem_antal_år = 2,
Branche_navn = factor("Fremstilling af maskiner og udstyr i.a.n."),
MeetingLength = 180,
PNumber = 12345678
)
# Forudsiger klassifikation og sandsynlighed
predict(final_model, new_company)                    # 0 = bliver, 1 = churn
predict(final_model, new_company, type = "prob")     # churn-sandsynlighed
# ------------------------------------------------------------------------------
# 11.2 Forudsig churn for ALLE virksomheder og tilføj resultater
# ------------------------------------------------------------------------------
# Modellen anvendes nu på hele medlemsdatabasen for at identificere churn-risiko
# Forudsiger sandsynlighed og klasse
churn_probs   <- predict(final_model, feature_engineering, type = "prob")
churn_classes <- predict(final_model, feature_engineering)
# Kombiner og omdøb kolonner
all_predictions <- bind_cols(churn_probs, churn_classes) |>
rename(
churn_prob = .pred_1,      # Sandsynlighed for churn
churn_class = .pred_class  # Klassifikation (0/1)
)
# Tilføj til datasættet og konvertér sandsynlighed til procent
full_results <- feature_engineering |>
bind_cols(all_predictions) |>
mutate(
churn_prob = round(churn_prob * 100, 1)
)
# Tilføj churn-risikokategorier tidligt (bruges i visualiseringer og rapporter)
full_results <- full_results |>
mutate(
churn_risiko = case_when(
churn_prob >= 80 ~ "Høj risiko",
churn_prob >= 60 ~ "Moderat risiko",
churn_prob >= 40 ~ "Lav risiko",
TRUE             ~ "Minimal risiko"
)
)
# ------------------------------------------------------------------------------
# 11.3 Churn-risiko: Filtrér medlemmer (churn == 0) med høj risiko (churn_class == 1)
# ------------------------------------------------------------------------------
top_risiko_medlemmer <- full_results |>
filter(churn == 0, churn_class == 1) |>
arrange(desc(churn_prob)) |>
slice_head(n = 20)  # Call to action: top 20
# ------------------------------------------------------------------------------
# 11.4 Visualiseringer: Brancher og postnumre med høj churn
# ------------------------------------------------------------------------------
# Brancher med højest gennemsnitlig churn
full_results |>
group_by(Branche_navn) |>
summarise(gennemsnitlig_churn = mean(churn_prob), n = n()) |>
arrange(desc(gennemsnitlig_churn)) |>
slice_head(n = 5) |>
ggplot(aes(x = reorder(Branche_navn, gennemsnitlig_churn), y = gennemsnitlig_churn)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 5 churn-risiko", x = "Branche", y = "Gns. churn sandsynlighed (%)") +
theme_minimal()
ggsave("images/5_brancher_højeste_churn.png", width = 7, height = 4, dpi = 300)
# Postnumre med højest gennemsnitlig churn
full_results |>
group_by(PostalCode) |>
summarise(gennemsnitlig_churn = mean(churn_prob), n = n()) |>
arrange(desc(gennemsnitlig_churn)) |>
slice_head(n = 5) |>
ggplot(aes(x = reorder(as.character(PostalCode), gennemsnitlig_churn), y = gennemsnitlig_churn)) +
geom_col(fill = "darkred") +
coord_flip() +
labs(title = "Top 5 postnumre med højest churn-risiko", x = "Postnummer", y = "Gns. churn sandsynlighed (%)") +
theme_minimal()
ggsave("images/6_postnummer_højeste_churn.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 11.5 Hvad kendetegner virksomheder der IKKE churner?
# ------------------------------------------------------------------------------
full_results |>
filter(churn_class == 0) |>  # Virksomheder som modellen forudser bliver
count(Branche_navn, sort = TRUE) |>
slice_head(n = 5) |>
ggplot(aes(x = reorder(Branche_navn, n), y = n)) +
geom_col(fill = "forestgreen") +
coord_flip() +
labs(
title = "Top 5 der ikke churner",
x = "Branche",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/7_top5_der_ikke_churner.png", width = 7, height = 4, dpi = 300)
# Sammenlignende statistik på udvalgte variabler
# churn_class:
# 0 = modellen tror de bliver
# 1 = modellen tror de churner
full_results |>
group_by(churn_class) |>
summarise(
mødelængde = mean(MeetingLength),
medlem_år = mean(medlem_antal_år),
kontakt_rate = mean(har_haft_kontakt == "Ja"),
event_rate = mean(deltaget_i_event == "Ja")
)
# ------------------------------------------------------------------------------
# 11.6 Hvad er de vigtigste parametre
# ------------------------------------------------------------------------------
# 1. Udtræk tuning-resultater og workflow
rf_result <- churn_results_rf |> extract_workflow_set_result("churn_recipe_rf")
rf_workflow <- churn_results_rf |> extract_workflow("churn_recipe_rf")
# 2. Find bedste parametre og træn modellen på træningsdata
best_rf <- rf_workflow |>
finalize_workflow(select_best(rf_result, metric = "f_meas")) |>
fit(data = churn_train)
# 3. Brug vip til at finde top 10 vigtigste variabler
vip_rf <- vi(extract_fit_parsnip(best_rf)) |>
slice_max(order_by = Importance, n = 10) |>
mutate(Variable = str_wrap(Variable, width = 30))
# 4. Plot
ggplot(vip_rf, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Top 10 variabler (RF)",
x = "Variabel",
y = "Vigtighed"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.text.y = element_text(size = 10)
)
# 5. Gem billedet
ggsave("images/8_top_10_variabler_rf.png", width = 7, height = 4, dpi = 300)
# -------------------------------------------------------------------------
# Forklaring af churn-relaterede variabler
# -------------------------------------------------------------------------
# 1. churn:
#    Den faktiske status for virksomheden ifølge databasen.
#    0 = Virksomheden er stadig medlem.
#    1 = Virksomheden har meldt sig ud (churnet).
#    Dette er det "rigtige facit", vi forsøger at forudsige.
# 2. .pred_0:
#    Modellens vurdering af sandsynligheden for, at virksomheden IKKE churner.
#    Fx 0.93 betyder: modellen mener der er 93 % chance for, at virksomheden bliver medlem.
#    OBS: Denne bruges mest til teknisk forståelse – i praksis bruger vi oftest churn_prob i stedet.
# 3. churn_prob:
#    Modellens vurdering af sandsynligheden for churn – konverteret til procent.
#    Fx 6.1 betyder: modellen vurderer, at der er 6,1 % risiko for, at virksomheden churner.
#    Denne kolonne er lettest at forstå og bruge i praksis.
# 4. churn_class:
#    Modellens endelige beslutning: churn eller ej?
#    1 = modellen tror virksomheden churner
#    0 = modellen tror virksomheden bliver
#    Beslutningen bygger på en tærskel, typisk 50 %
# 5. churn_risiko:
#    Kategori baseret på churn_prob – lavet for at gøre det endnu mere overskueligt.
#    Fx:
#      • "Minimal risiko" → under 40 %
#      • "Lav risiko"     → 40-59 %
#      • "Moderat risiko" → 60-79 %
#      • "Høj risiko"     → 80 % eller højere
# Chunk 17
# Loader pakker til Shiny appen
pacman::p_load(
shiny, leaflet, dplyr, readr, shinyWidgets, DT, ggplot2
)
# Indlæser datasæt
full_results <- readRDS("data/full_results.rds")
# Postal code coordinates
postal_coords <- data.frame(
PostalCode = c(8800, 8850, 8830, 7470, 8840, 7800, 8831, 8832, 9632, 7850, 9620, 9500, 8860),
lat = c(56.451, 56.532, 56.447, 56.489, 56.472, 56.475, 56.448, 56.449, 56.907, 56.573, 56.824, 57.226, 56.611),
lng = c(9.404, 8.486, 9.186, 9.000, 8.662, 9.156, 9.163, 9.171, 9.287, 9.156, 9.388, 9.388, 8.954)
)
# Prepare data
full_results$PostalCode <- as.character(full_results$PostalCode)
postal_coords$PostalCode <- as.character(postal_coords$PostalCode)
data_map <- full_results %>%
left_join(postal_coords, by = "PostalCode") %>%
mutate(
risk_category = case_when(
churn_prob > 0.75 ~ "High",
churn_prob > 0.5 ~ "Medium",
TRUE ~ "Low"
),
risk_category = factor(risk_category, levels = c("High", "Medium", "Low"))
)
# Define UI
ui <- fluidPage(
tags$head(
tags$style(HTML("
.dataTables_wrapper .dataTables_length,
.dataTables_wrapper .dataTables_filter,
.dataTables_wrapper .dataTables_info,
.dataTables_wrapper .dataTables_paginate {
font-size: 90%;
}
table.dataTable th, table.dataTable td {
white-space: nowrap;
padding: 4px 10px;
font-size: 90%;
}
.risk-high { color: #e74c3c; font-weight: bold; }
.risk-medium { color: #f39c12; }
.risk-low { color: #2ecc71; }
.info-box {
background-color: #f8f9fa;
border-left: 4px solid #3498db;
padding: 10px;
margin-bottom: 15px;
}
"))
),
titlePanel("Business Viborg - Churn Risk Visualization"),
sidebarLayout(
sidebarPanel(
width = 3,
div(class = "info-box",
h4("Application Guide"),
p("Explore member churn risk by location. Filter and analyze data using the controls below.")
),
radioGroupButtons(
inputId = "view_by",
label = "View Mode:",
choices = c("Postal Code" = "PostalCode",
"Member ID" = "PNumber",
"All Members" = "all"),
selected = "all",
status = "primary"
),
conditionalPanel(
condition = "input.view_by == 'PostalCode'",
pickerInput(
inputId = "postal_code",
label = "Select Postal Code(s):",
choices = unique(data_map$PostalCode),
multiple = TRUE,
options = list(`actionsBox` = TRUE)
)
),
conditionalPanel(
condition = "input.view_by == 'PNumber'",
selectizeInput(
inputId = "member_id",
label = "Select Member ID:",
choices = NULL,
multiple = FALSE,
options = list(
placeholder = 'Type to search',
onInitialize = I('function() { this.setValue(""); }')
)
)
),
sliderInput(
inputId = "churn_range",
label = "Churn Probability Range:",
min = 0,
max = 1,
value = c(0, 1),
step = 0.01
),
checkboxGroupButtons(
inputId = "risk_categories",
label = "Risk Categories:",
choices = c("High", "Medium", "Low"),
selected = c("High", "Medium", "Low"),
status = "primary",
checkIcon = list(yes = icon("ok", lib = "glyphicon"))
),
actionBttn(
inputId = "reset_filters",
label = "Reset Filters",
style = "material-flat",
color = "warning"
),
actionBttn(
inputId = "show_top10",
label = "Vis Top 10 Churn Risiko",
style = "material-flat",
color = "danger"
)
),
mainPanel(
width = 9,
tabsetPanel(
tabPanel("Map View", leafletOutput("map", height = "700px")),
tabPanel("Data Table", DTOutput("data_table"), downloadButton("download_data", "Download Filtered Data")),
tabPanel("Summary Statistics",
h4("Churn Risk Distribution"), plotOutput("risk_distribution", height = "300px"),
h4("Risk by Postal Code"), plotOutput("postal_code_summary", height = "300px")
),
tabPanel("Top 5 Branches",
h4("Brancher med højest gennemsnitlig churn"),
plotOutput("top_branches", height = "400px")
)
)
)
)
)
# Server logic
server <- function(input, output, session) {
updateSelectizeInput(session, "member_id", choices = unique(data_map$PNumber), server = TRUE)
filtered_data <- reactive({
data <- data_map %>%
filter(churn_prob >= input$churn_range[1], churn_prob <= input$churn_range[2]) %>%
filter(risk_category %in% input$risk_categories)
if (input$view_by == "PostalCode" && !is.null(input$postal_code)) {
data <- data %>% filter(PostalCode %in% input$postal_code)
} else if (input$view_by == "PNumber" && !is.null(input$member_id)) {
data <- data %>% filter(PNumber == input$member_id)
}
data
})
observeEvent(input$reset_filters, {
updateSliderInput(session, "churn_range", value = c(0, 1))
updateCheckboxGroupButtons(session, "risk_categories", selected = c("High", "Medium", "Low"))
updateRadioGroupButtons(session, "view_by", selected = "all")
updatePickerInput(session, "postal_code", selected = character(0))
updateSelectizeInput(session, "member_id", selected = "")
})
observeEvent(input$show_top10, {
showModal(modalDialog(
title = "Top 10 medlemmer med højest churn-risiko",
p("Denne tabel viser de 10 medlemmer med størst risiko for at forlade Business Viborg."),
DTOutput("top_members_modal"),
easyClose = TRUE,
footer = modalButton("Luk")
))
})
output$top_members_modal <- renderDT({
filtered_data() %>%
arrange(desc(churn_prob)) %>%
slice_head(n = 10) %>%
dplyr::mutate(churn_prob = churn_prob * 100) %>%
dplyr::select(PNumber, PostalCode, churn_prob, risk_category) %>%
datatable(
rownames = FALSE,
colnames = c('Member ID', 'Postal Code', 'Churn Probability (%)', 'Risk Category'),
options = list(pageLength = 10, scrollX = FALSE, autoWidth = TRUE),
class = 'compact'
) %>%
formatRound('churn_prob', 1) %>%
formatStyle(
'risk_category',
backgroundColor = styleEqual(
c("High", "Medium", "Low"),
c("#e74c3c", "#f39c12", "#2ecc71")
)
)
})
# Kort og data/plots - beholdt uændret
risk_pal <- colorFactor(palette = c("#e74c3c", "#f39c12", "#2ecc71"), levels = c("High", "Medium", "Low"))
output$map <- renderLeaflet({
df <- filtered_data()
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
lng = ~lng,
lat = ~lat,
radius = ~churn_prob * input$marker_size,
color = ~risk_pal(risk_category),
fillOpacity = 0.8,
stroke = TRUE,
weight = 1,
label = ~paste0(
"Member ID: ", PNumber, "<br>",
"Postal Code: ", PostalCode, "<br>",
"Churn Risk: ", round(churn_prob * 100, 1), "%<br>",
"Category: ", risk_category
),
clusterOptions = if(nrow(df) > 100) markerClusterOptions() else NULL
) %>%
addLegend(position = "bottomright", pal = risk_pal, values = ~risk_category, title = "Churn Risk", opacity = 1)
})
output$data_table <- renderDT({
datatable(
filtered_data() %>%
dplyr::mutate(churn_prob = churn_prob * 100) %>%
dplyr::select(PNumber, PostalCode, churn_prob, risk_category, lat, lng),
rownames = FALSE,
colnames = c('Member ID', 'Postal Code', 'Churn Probability', 'Risk Category', 'Latitude', 'Longitude'),
filter = 'top',
options = list(pageLength = 10, scrollX = TRUE, dom = 'Bfrtip', buttons = c('copy', 'csv', 'excel')),
extensions = 'Buttons'
) %>%
formatRound('churn_prob', 1) %>%
formatStyle('churn_prob', textAlign = 'right', color = 'black') %>%
formatStyle('risk_category', backgroundColor = styleEqual(c("High", "Medium", "Low"), c("#e74c3c", "#f39c12", "#2ecc71")))
})
output$download_data <- downloadHandler(
filename = function() { paste("churn_data_", Sys.Date(), ".csv", sep = "") },
content = function(file) { write.csv(filtered_data(), file, row.names = FALSE) }
)
output$risk_distribution <- renderPlot({
df <- filtered_data() %>% mutate(churn_prob = churn_prob * 100)
ggplot(df, aes(x = churn_prob, fill = risk_category)) +
geom_histogram(binwidth = 5, color = "white") +
scale_fill_manual(values = c("#e74c3c", "#f39c12", "#2ecc71")) +
labs(title = "Distribution of Churn Probabilities", x = "Churn Probability (%)", y = "Count") +
theme_minimal() +
theme(legend.position = "bottom")
})
output$postal_code_summary <- renderPlot({
df <- filtered_data()
if(nrow(df) > 0) {
df %>%
group_by(PostalCode) %>%
summarise(avg_churn = mean(churn_prob) * 100, count = n()) %>%
ggplot(aes(x = reorder(PostalCode, avg_churn), y = avg_churn, fill = count)) +
geom_col() +
coord_flip() +
scale_fill_gradient(low = "#d6eaf8", high = "#3498db") +
labs(title = "Average Churn Risk by Postal Code", x = "Postal Code", y = "Average Churn Probability (%)") +
theme_minimal()
}
})
output$top_branches <- renderPlot({
full_results %>%
group_by(Branche_navn) %>%
summarise(gennemsnitlig_churn = mean(churn_prob) * 100, n = n()) %>%
arrange(desc(gennemsnitlig_churn)) %>%
slice_head(n = 5) %>%
ggplot(aes(x = reorder(Branche_navn, gennemsnitlig_churn), y = gennemsnitlig_churn)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 5 brancher med højest churn-risiko", x = "Branche", y = "Gns. churn sandsynlighed (%)") +
theme_minimal()
})
}
# Run the app
shinyApp(ui, server)
