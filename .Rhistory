ggplot(aes(x = fct_reorder(hjælp_kategori, antal), y = antal)) +
geom_col(fill = "darkred") +                                    # Farve: Rød for ikke-deltagere
geom_text(aes(label = antal), hjust = -0.1, size = 4) +
coord_flip() +                                                 # Vandret søjlediagram
labs(
title = "Hjælpetyper hos aktive medlemmer der ikke deltager i events",
subtitle = "Viser hvilke behov de har uden deltagelse i events",
x = "Hjælpekategori",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/EDA_6_deltager_ikke_events.png", width = 7, height = 4, dpi = 300)
# Deltagere i event – hvilke typer hjælp efterspørger de?
# ------------------------------------------------------------------------------
featured |>
filter(churn == 0, deltaget_i_event == "Ja") |>                # Kun aktive, deltagere
count(hjælp_kategori, name = "antal") |>
filter(!is.na(hjælp_kategori)) |>
ggplot(aes(x = fct_reorder(hjælp_kategori, antal), y = antal)) +
geom_col(fill = "darkgreen") +                                 # Farve: grøn for deltagere
geom_text(aes(label = antal), hjust = -0.1, size = 4) +
coord_flip() +
labs(
title = "Hjælpetyper hos aktive medlemmer der deltager i events",
subtitle = "Viser hvilke behov de har, trods deltagelse i events",
x = "Hjælpekategori",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/EDA_6_1_deltager_i_events.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.7 Søjlediagram: Branchefordeling blandt aktive medlemmer
# ------------------------------------------------------------------------------
# Vi undersøger hvilke brancher de *aktive* virksomheder (medlemmer) tilhører.
# Formålet er at få et overblik over, hvilke brancher der er mest repræsenteret
# blandt dem, der stadig er med i fællesskabet (churn == 0).
# Kun brancher med mindst 10 virksomheder vises, for at sikre et læsbart plot.
featured |>
# Filtrér: medtag kun virksomheder der stadig er medlemmer (aktive)
filter(churn == 0) |>
# Tæl antallet af virksomheder pr. branche
count(Branche_navn, name = "antal") |>
# Fjern brancher med færre end 10 aktive virksomheder
filter(antal >= 10) |>
# Sortér brancherne efter antal, så de vises i rigtig rækkefølge i plottet
mutate(Branche_navn = fct_reorder(Branche_navn, antal)) |>
# Visualiser fordelingen med søjlediagram
ggplot(aes(x = Branche_navn, y = antal)) +
# geom_col bruger vores forudberegnede 'antal' til at tegne søjler
geom_col(fill = "darkgreen") +
# Tilføj antals-labels til søjlerne (antal virksomheder)
geom_text(aes(label = antal), hjust = -0.1, size = 4) +
# Vend koordinaterne, så brancherne vises lodret og er nemmere at læse
coord_flip() +
# Tilføj titel, undertitel og aksetekster
labs(
title = "Branchefordeling blandt aktive medlemmer",
subtitle = "Viser kun brancher med mindst 10 aktive virksomheder",
x = "Branche",
y = "Antal virksomheder"
) +
# Brug minimalistisk tema for et rent visuelt udtryk
theme_minimal()
ggsave("images/EDA_7_branchefordeling.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.8 Søjlediagram: Eventdeltagelse fordelt på branche (kun aktive medlemmer)
# ------------------------------------------------------------------------------
# Vi undersøger hvordan virksomhedernes deltagelse i events varierer
# på tværs af brancher.
# Kun aktive virksomheder (churn == 0) tages med i analysen.
# Vi vil gerne se, hvor mange fra hver branche der har deltaget /
# ikke deltaget i events.
brancher_antal <- featured |>
# Filtrér: medtag kun aktive virksomheder
filter(churn == 0) |>
# Tæl antallet af virksomheder for hver kombination af branche og eventdeltagelse
count(Branche_navn, deltaget_i_event, name = "antal") |>
# Beregn totalen pr. branche (summen af 'Ja' og 'Nej')
group_by(Branche_navn) |>
mutate(total = sum(antal)) |>
# Behold kun brancher med mindst 10 aktive virksomheder i alt
filter(total >= 10) |>
ungroup()
# Sortér brancher efter hvor mange virksomheder der har deltaget i events ("Ja")
sortering <- brancher_antal |>
filter(deltaget_i_event == "Ja") |>
arrange(desc(antal)) |>
pull(Branche_navn)
brancher_antal |>
# Sortér brancherne i plottet ud fra antallet af 'Ja'-svar
mutate(Branche_navn = factor(Branche_navn, levels = unique(sortering))) |>
# Opret stacked søjlediagram, hvor 'Ja' og 'Nej' ligger oven på hinanden
ggplot(aes(x = Branche_navn, y = antal, fill = deltaget_i_event)) +
# geom_col tegner søjlerne baseret på vores antal
geom_col(position = "stack") +
# Tilføj tekstetiketter med antal, centreret i hver del af søjlen
geom_text(aes(label = antal), position = position_stack(vjust = 0.5),
color = "white", size = 4) +
# Vend akserne, så brancherne læses nemmere
coord_flip() +
# Brug manuelle farver: grøn = deltaget, grå = ikke deltaget
scale_fill_manual(values = c("Ja" = "darkgreen", "Nej" = "grey60")) +
# Tilføj titler og akse-labels
labs(
title = "Eventdeltagelse fordelt på branche",
subtitle = "Kun aktive medlemmer med min. 10 virksomheder per branche",
x = "Branche",
y = "Antal virksomheder",
fill = "Eventdeltagelse"
) +
# Brug minimalistisk ggplot-tema
theme_minimal()
ggsave("images/EDA_8_eventdeltagelse_branche.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.9 Søjlediagram: Hjælpekategorier fordelt på branche (kun aktive medlemmer)
# ------------------------------------------------------------------------------
# Vi ønsker at undersøge, hvilke typer hjælp aktive virksomheder efterspørger,
# og hvordan det varierer på tværs af brancher.
# Fokus er på aktive medlemmer (churn == 0), og vi ser kun på brancher
# med mindst 5 registrerede hjælpetilfælde, for at sikre relevans i plottet.
featured |>
# Filtrér: medtag kun aktive virksomheder og fjern rækker uden hjælpekategori
filter(churn == 0, !is.na(hjælp_kategori)) |>
# Tæl antallet af hjælperegistreringer pr. branche og hjælpekategori
count(Branche_navn, hjælp_kategori, name = "antal") |>
# Beregn total antal hjælperegistreringer pr. branche
group_by(Branche_navn) |>
mutate(total = sum(antal)) |>
ungroup() |>
# Fjern brancher med under 5 hjælperegistreringer
filter(total >= 5) |>
# Sortér brancherne efter total, så de vises i rigtig rækkefølge i plottet
mutate(Branche_navn = fct_reorder(Branche_navn, total)) |>
# Opret søjlediagram med hjælpekategori som fill (farvelag)
ggplot(aes(x = Branche_navn, y = antal, fill = hjælp_kategori)) +
# geom_col tegner de stablede søjler (én farve pr. hjælpekategori)
geom_col() +
# Vend koordinatsystemet, så brancherne er på y-aksen (bedre læsbarhed)
coord_flip() +
# Tilføj titler og aksetekster
labs(
title = "Hjælpekategorier fordelt på branche",
subtitle = "Kun aktive medlemmer med mindst 5 registrerede hjælpetilfælde",
x = "Branche",
y = "Antal hjælperegistreringer",
fill = "Hjælpekategori"
) +
# Brug minimalistisk ggplot-tema og lidt større tekst
theme_minimal(base_size = 13) +
# Flyt legenden ned under plottet (bedre ved mange kategorier)
theme(legend.position = "bottom")
ggsave("images/EDA_9_hjælpekategorier_branche.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.10 Søjlediagram: Eventdeltagelse pr. postnummer (Aktive medlemmer)
# ------------------------------------------------------------------------------
# Vi undersøger, hvordan aktive virksomheders eventdeltagelse fordeler sig geografisk,
# baseret på postnummer. Vi viser både deltagelse ("Ja") og ikke-deltagelse ("Nej"),
# og sorterer postnumrene efter hvor stor andelen af 'Ja'-svar er.
# Beregn antal og andel for hver kombination af postnummer og eventdeltagelse
post_event <- featured |>
# Filtrér: medtag kun aktive virksomheder
filter(churn == 0) |>
# Tæl antallet af virksomheder pr. postnummer og eventstatus
count(PostalCode, deltaget_i_event, name = "antal") |>
# Beregn total antal og procentuel andel inden for hvert postnummer
group_by(PostalCode) |>
mutate(
total = sum(antal),                              # Total antal virksomheder
andel = round(antal / total * 100, 1)            # Andel i procent
) |>
ungroup()
# Sortér postnumre efter andel af virksomheder der har deltaget i events ("Ja")
post_order <- post_event |>
filter(deltaget_i_event == "Ja") |>
arrange(desc(andel)) |>
pull(PostalCode)
# Visualiser data som stacked søjlediagram
post_event |>
# Sortér postnumrene i plottet efter andel 'Ja'
mutate(PostalCode = factor(PostalCode, levels = post_order)) |>
# Opret plot med antal virksomheder pr. postnummer, farvet efter eventdeltagelse
ggplot(aes(x = PostalCode, y = antal, fill = deltaget_i_event)) +
# geom_col tegner stablede søjler
geom_col() +
# Tilføj antalslabels midt i søjlerne
geom_text(aes(label = antal), position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
# Brug manuelle farver: grøn = deltager, grå = deltager ikke
scale_fill_manual(values = c("Ja" = "darkgreen", "Nej" = "grey60")) +
# Vend koordinatsystemet for bedre læsbarhed
coord_flip() +
# Tilføj titel, aksetitler og farveforklaring
labs(
title = "Eventdeltagelse pr. postnummer (aktive virksomheder)",
subtitle = "Sorteret efter postnumre med flest 'Ja'-svar",
x = "Postnummer",
y = "Antal virksomheder",
fill = "Eventdeltagelse"
) +
# Brug minimalistisk ggplot-tema
theme_minimal()
ggsave("images/EDA_10_eventdeltagelse_postnummer.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.11 Søjlediagram: Gennemsnitlig mødelængde pr. branche (kun aktive medlemmer)
# ------------------------------------------------------------------------------
# Vi undersøger hvor lang tid møderne i gennemsnit varer for hver branche,
# men ser kun på aktive medlemmer og brancher med tilstrækkeligt datagrundlag.
# Det giver indsigt i, hvilke brancher der fx kræver mere sparring eller støtte.
featured |>
# Filtrér: medtag kun aktive medlemmer med gyldig mødelængde (> 0 og ikke NA)
filter(churn == 0, !is.na(MeetingLength), MeetingLength > 0) |>
# Beregn gennemsnitlig mødelængde og antal møder pr. branche
group_by(Branche_navn) |>
summarise(
gennemsnit_min = round(mean(MeetingLength, na.rm = TRUE), 1),  # afrundet gennemsnit
antal = n(),                                                   # antal møder
.groups = "drop"
) |>
# Behold kun brancher med mindst 5 registrerede møder
filter(antal >= 1) |>
# Sortér brancherne efter gennemsnitlig mødelængde (fra højest til lavest)
arrange(desc(gennemsnit_min)) |>
# Reordn faktorniveauerne så sorteringen overføres til plot
mutate(Branche_navn = fct_reorder(Branche_navn, gennemsnit_min)) |>
# Visualiser data med et søjlediagram
ggplot(aes(x = Branche_navn, y = gennemsnit_min)) +
# geom_col viser gennemsnitlig mødelængde pr. branche
geom_col(fill = "darkgreen", alpha = 0.8) +
# Tilføj tekstetiketter med mødelængden på hver søjle
geom_text(aes(label = paste0(gennemsnit_min, " min")), hjust = -0.1, size = 4) +
# Vend koordinaterne så brancherne vises lodret og er nemmere at læse
coord_flip() +
# Tilføj titler, undertitel og akse-labels
labs(
title = "Gennemsnitlig mødelængde pr. branche (aktive medlemmer)",
subtitle = "Viser kun brancher med mindst 5 registrerede møder",
x = "Branche",
y = "Gennemsnitlig mødelængde (minutter)"
) +
# Brug minimalistisk ggplot-tema og lidt større base-tekst
theme_minimal(base_size = 13)
ggsave("images/EDA_11_mødelængde.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.12 Boxplot: Mødelængde vs. eventdeltagelse (kun aktive medlemmer)
# ------------------------------------------------------------------------------
# Vi undersøger, om der er forskel i mødelængde blandt aktive virksomheder
# afhængigt af om de har deltaget i events eller ej.
# Vi visualiserer forskellen med boxplots og markerer både gennemsnit og outliers.
# Gør datasættet klar: filtrér aktive, beregn outliers, og opret grupper
meeting_event <- featured |>
# Filtrér kun aktive virksomheder med mødelængde registreret
filter(churn == 0, !is.na(MeetingLength)) |>
# Opret en ny variabel "Eventgruppe" baseret på om de har deltaget i events
mutate(
Eventgruppe = if_else(deltaget_i_event == "Ja", "Deltager i event", "Deltager ikke"),
# Identificer outliers i mødelængde med IQR-metoden
outlier = find_outliers(MeetingLength)
)
# Udtræk statistik til annotationer i boxplottet
meeting_stats <- meeting_event |>
group_by(Eventgruppe) |>
summarise(
antal = n(),                                         # Antal observationer pr. gruppe
gennemsnit = round(mean(MeetingLength), 1),          # Gennemsnitlig mødelængde
outliers = sum(outlier),                             # Antal outliers
.groups = "drop"
)
# Visualisér forskellen med boxplots
meeting_event |>
ggplot(aes(x = Eventgruppe, y = MeetingLength, fill = Eventgruppe)) +
# Boxplot viser fordeling, median og outliers
geom_boxplot(alpha = 0.7, outlier.color = "blue") +
# Tilføj en rød prik for gennemsnittet i hver gruppe
stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "darkred") +
# Annotér med antal virksomheder pr. gruppe (øverst over boxplot)
geom_text(data = meeting_stats, aes(x = Eventgruppe,
y = max(meeting_event$MeetingLength, na.rm = TRUE) + 5,
label = paste0("n = ", antal)), size = 4) +
# Annotér med gennemsnitlig mødelængde
geom_text(data = meeting_stats, aes(x = Eventgruppe, y = gennemsnit,
label = paste0("Gns: ", gennemsnit, " min")),
size = 4, color = "darkred", nudge_y = 5) +
# Vend koordinatsystemet, så grupperne vises lodret
coord_flip() +
# Brug manuelle farver til at skelne mellem deltager/ikke-deltager
scale_fill_manual(values = c("Deltager i event" = "darkgreen", "Deltager ikke" = "red")) +
# Tilføj titler, aksetitel og undertekst
labs(
title = "Mødelængde vs. eventdeltagelse (aktive medlemmer)",
subtitle = "Rød prik = gennemsnit • Blå prikker = outliers",
x = NULL,                        # Ingen x-aksenavn (grupperne forklarer sig selv)
y = "Mødelængde (minutter)"
) +
# Brug minimalistisk tema med større font
theme_minimal(base_size = 13) +
# Fjern legend, da den ikke er nødvendig – informationen er allerede tydelig i x-aksen
theme(legend.position = "none")
ggsave("images/EDA_12_mødelængde_eventdeltagelse.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.13 Boxplot: Mødelængde vs. medlemsstatus
# ------------------------------------------------------------------------------
# Vi undersøger, om der er forskel i mødelængde mellem aktive og stoppede medlemmer.
# Dette kan give indsigt i, om engagement (målt som mødetid) har betydning for churn.
# Udregn nøgleoplysninger til visning i plottet
meeting_churn_stats <- featured |>
filter(!is.na(MeetingLength)) |>
group_by(churn) |>
summarise(
n = n(),                                                       # Antal observationer
gennemsnit = round(mean(MeetingLength, na.rm = TRUE), 1),      # Gennemsnitlig mødelængde
outliers = sum(find_outliers(MeetingLength)),                  # Antal outliers
.groups = "drop"
) |>
mutate(churn = factor(churn, levels = c(0, 1), labels = c("Aktiv", "Stoppet")))
# Opret boxplot med medlemsstatus som grupperingsvariabel
featured |>
filter(!is.na(MeetingLength)) |>
mutate(
churn = factor(churn, levels = c(0, 1), labels = c("Aktiv", "Stoppet")),
outlier = find_outliers(MeetingLength)
) |>
ggplot(aes(x = churn, y = MeetingLength, fill = churn)) +
# Vis fordeling og outliers som boxplot
geom_boxplot(alpha = 0.7, outlier.shape = 16, outlier.color = "blue", outlier.size = 2) +
# Marker gennemsnittet med en rød prik
stat_summary(fun = mean, geom = "point", color = "darkred", size = 3, shape = 18) +
# Tilføj tekst med gennemsnitlig mødelængde for hver gruppe
geom_text(data = meeting_churn_stats, aes(x = churn, y = gennemsnit,
label = paste0("Gns: ", gennemsnit, " min")),
color = "darkred", size = 4, nudge_y = 5, inherit.aes = FALSE) +
# Vis antal observationer som tekst over hver boks
geom_text(data = meeting_churn_stats, aes(x = churn, y = max(featured$MeetingLength, na.rm = TRUE) + 5,
label = paste0("n = ", n)),
color = "black", size = 4, inherit.aes = FALSE) +
# Vend akserne, så medlemsstatus vises lodret
coord_flip() +
# Brug farver der skelner aktiv og stoppet medlemsstatus
scale_fill_manual(values = c("Aktiv" = "darkgreen", "Stoppet" = "darkred")) +
# Tilføj titler og aksetekster
labs(
title = "Mødelængde vs. medlemsstatus",
subtitle = "Rød prik = gennemsnit • Blå prikker = outliers",
x = "Medlemsstatus",
y = "Mødelængde (minutter)",
fill = "Status"
) +
# Brug minimalistisk tema og fjern legend
theme_minimal(base_size = 13) +
theme(legend.position = "none")
ggsave("images/EDA_13_mødelængde_medlemsstatus.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.14 Histogram: Fordeling af mødelængder
# ------------------------------------------------------------------------------
# Vi undersøger hvordan mødelængder fordeler sig blandt aktive medlemmer,
# for at se om der er typiske længder, outliers eller skævhed.
featured |>
filter(churn == 0, !is.na(MeetingLength), MeetingLength > 0) |>
ggplot(aes(x = MeetingLength)) +
geom_histogram(binwidth = 10, fill = "darkgreen", color = "white", boundary = 0) +
labs(
title = "Fordeling af mødelængder (aktive medlemmer)",
subtitle = "Histogram med binwidth = 10 minutter",
x = "Mødelængde (minutter)",
y = "Antal møder"
) +
theme_minimal()
ggsave("images/EDA_14_fordeling_mødelængder.png", width = 7, height = 4, dpi = 300)
# ------------------------------------------------------------------------------
# 5.15 Korrellationsmatrix: Numeriske variable
# ------------------------------------------------------------------------------
# Vi ønsker at undersøge, hvordan de numeriske variable i datasættet hænger sammen.
# Det gør vi ved at udtrække alle numeriske kolonner og beregne en korrelationsmatrix.
# Denne visualiseres som et cirkelplot med Pearson-korrelationer.
# Udtræk kun de kolonner i datasættet, der er numeriske
featured_numerisk <- featured |>
select(where(is.numeric)) |>
# Fjern rækker med NA-værdier, da korrelationsberegning kræver komplette værdier
drop_na()
# Beregn korrelationsmatrix ved hjælp af Pearson's metode
cor_matrix <- cor(featured_numerisk, use = "pairwise.complete.obs")
# Afrund korrelationerne til 2 decimaler for pænere visning (valgfrit trin)
cor_matrix_rounded <- round(cor_matrix, 2)
# Visualisér korrelationerne med et "cirkelplot" fra pakken 'corrplot'
corrplot::corrplot(
cor_matrix,
method = "circle",       # Brug cirkler til at vise styrke og retning af korrelation
type = "lower",          # Vis kun nederste trekant (mere overskueligt)
# Tekst og talindstillinger
tl.cex = 0.8,            # Størrelse på tekstetiketter (variabelnavne)
tl.col = "black",        # Farve på variabelnavne
addCoef.col = "darkgreen"    # Vis selve korrelationstallet inde i cirklerne
)
ggsave("images/EDA_15_korrellationsmatrix.png", width = 7, height = 4, dpi = 300)
full_results |>
count(churn_risiko) |>
ggplot(aes(x = reorder(churn_risiko, -n), y = n, fill = churn_risiko)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n), vjust = -0.3, size = 5) +
scale_fill_manual(values = c(
"Minimal risiko" = "darkgreen",
"Lav risiko"     = "green4",
"Moderat risiko" = "orange",
"Høj risiko"     = "darkred"
)) +
labs(
title = "Fordeling af churn-risikokategorier",
x = "Risikokategori",
y = "Antal virksomheder"
) +
theme_minimal()
full_results |>
filter(churn == 0) |>  # Kun nuværende medlemmer
count(churn_risiko) |>
ggplot(aes(x = reorder(churn_risiko, -n), y = n, fill = churn_risiko)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n), vjust = -0.3, size = 5) +
scale_fill_manual(values = c(
"Minimal risiko" = "darkgreen",
"Lav risiko"     = "green4",
"Moderat risiko" = "orange",
"Høj risiko"     = "darkred"
)) +
labs(
title = "Fordeling af churn-risiko blandt aktive medlemmer",
subtitle = "Baseret på modellens sandsynligheder for udmeldelse",
x = "Risikokategori",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/9_churn_risikokategorier_aktive.png", width = 7, height = 4, dpi = 300)
full_results |>
filter(churn == 0) |>  # Kun nuværende medlemmer
count(churn_risiko) |>
ggplot(aes(x = reorder(churn_risiko, -n), y = n, fill = churn_risiko)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n), vjust = -0.3, size = 5) +
scale_fill_manual(values = c(
"Minimal risiko" = "darkgreen",
"Lav risiko"     = "green4",
"Moderat risiko" = "orange",
"Høj risiko"     = "darkred"
)) +
labs(
title = "Fordeling af churn-risiko blandt aktive medlemmer",
subtitle = "",
x = "Risikokategori",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/9_churn_risikokategorier_aktive.png", width = 7, height = 4, dpi = 300)
full_results |>
filter(churn == 0) |>  # Kun nuværende medlemmer
count(churn_risiko) |>
ggplot(aes(x = reorder(churn_risiko, -n), y = n, fill = churn_risiko)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n), vjust = -0.5, size = 5) +
scale_fill_manual(values = c(
"Minimal risiko" = "darkgreen",
"Lav risiko"     = "green4",
"Moderat risiko" = "orange",
"Høj risiko"     = "darkred"
)) +
labs(
title = "Fordeling af churn-risiko blandt aktive medlemmer",
subtitle = "",
x = "Risikokategori",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/9_churn_risikokategorier_aktive.png", width = 7, height = 4, dpi = 300)
View(full_results)
full_results |>
filter(churn == 0) |>
count(churn_risiko) |>
ggplot(aes(x = reorder(churn_risiko, -n), y = n, fill = churn_risiko)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n), vjust = -1, size = 5) +
scale_fill_manual(values = c(
"Minimal risiko" = "darkgreen",
"Lav risiko"     = "green4",
"Moderat risiko" = "orange",
"Høj risiko"     = "darkred"
)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
labs(
title = "Fordeling af churn-risiko blandt aktive medlemmer",
x = "Risikokategori",
y = "Antal virksomheder"
) +
theme_minimal()
full_results |>
filter(churn == 0) |>
count(churn_risiko) |>
ggplot(aes(x = reorder(churn_risiko, -n), y = n, fill = churn_risiko)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n), vjust = -1, size = 5) +
scale_fill_manual(values = c(
"Minimal risiko" = "darkgreen",
"Lav risiko"     = "green4",
"Moderat risiko" = "orange",
"Høj risiko"     = "darkred"
)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
coord_cartesian(clip = "off") +
labs(
title = "Fordeling af churn-risiko blandt aktive medlemmer",
subtitle = "Kategorier: Minimal (<40%), Lav (40–59.9%), Moderat (60–79.9%), Høj (80–100%)",
x = "Risikokategori",
y = "Antal virksomheder"
) +
theme_minimal()
ggsave("images/9_churn_risikokategorier_aktive.png", width = 7, height = 4, dpi = 300)
